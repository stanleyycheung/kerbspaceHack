# coding: utf-8

"""
    Kerbside Curblr Api

    API for serving kerbside assets. Data is served in CurbLR format https://github.com/sharedstreets/curblr  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tbd@ford.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FeaturesControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_features_by_viewport_using_get(self, ocp_apim_subscription_key, **kwargs):  # noqa: E501
        """getFeaturesByViewport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_features_by_viewport_using_get(ocp_apim_subscription_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ocp_apim_subscription_key: (required)
        :param str viewport: viewport - a bounding box specified by two coordinates. First coordinate is bottom left second is top right. For example 51.31159579347505,-0.43013610839850003,51.73880216751415,0.25513610839837497
        :return: CurbLR
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_features_by_viewport_using_get_with_http_info(ocp_apim_subscription_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_features_by_viewport_using_get_with_http_info(ocp_apim_subscription_key, **kwargs)  # noqa: E501
            return data

    def get_features_by_viewport_using_get_with_http_info(self, ocp_apim_subscription_key, **kwargs):  # noqa: E501
        """getFeaturesByViewport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_features_by_viewport_using_get_with_http_info(ocp_apim_subscription_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ocp_apim_subscription_key: (required)
        :param str viewport: viewport - a bounding box specified by two coordinates. First coordinate is bottom left second is top right. For example 51.31159579347505,-0.43013610839850003,51.73880216751415,0.25513610839837497
        :return: CurbLR
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ocp_apim_subscription_key', 'viewport']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_features_by_viewport_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ocp_apim_subscription_key' is set
        if ('ocp_apim_subscription_key' not in params or
                params['ocp_apim_subscription_key'] is None):
            raise ValueError("Missing the required parameter `ocp_apim_subscription_key` when calling `get_features_by_viewport_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'viewport' in params:
            query_params.append(('viewport', params['viewport']))  # noqa: E501

        header_params = {}
        if 'ocp_apim_subscription_key' in params:
            header_params['Ocp-Apim-Subscription-Key'] = params['ocp_apim_subscription_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/features', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CurbLR',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
