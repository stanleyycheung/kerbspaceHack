# coding: utf-8

"""
    Kerbside Curblr Api

    API for serving kerbside assets. Data is served in CurbLR format https://github.com/sharedstreets/curblr  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tbd@ford.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Manifest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authority': 'Authority',
        'created_date': 'date',
        'currency': 'str',
        'last_updated_date': 'date',
        'time_zone': 'str',
        'unit_height_length': 'str',
        'unit_weight': 'str'
    }

    attribute_map = {
        'authority': 'authority',
        'created_date': 'createdDate',
        'currency': 'currency',
        'last_updated_date': 'lastUpdatedDate',
        'time_zone': 'timeZone',
        'unit_height_length': 'unitHeightLength',
        'unit_weight': 'unitWeight'
    }

    def __init__(self, authority=None, created_date=None, currency=None, last_updated_date=None, time_zone=None, unit_height_length=None, unit_weight=None):  # noqa: E501
        """Manifest - a model defined in Swagger"""  # noqa: E501

        self._authority = None
        self._created_date = None
        self._currency = None
        self._last_updated_date = None
        self._time_zone = None
        self._unit_height_length = None
        self._unit_weight = None
        self.discriminator = None

        self.authority = authority
        self.created_date = created_date
        self.currency = currency
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        self.time_zone = time_zone
        self.unit_height_length = unit_height_length
        self.unit_weight = unit_weight

    @property
    def authority(self):
        """Gets the authority of this Manifest.  # noqa: E501


        :return: The authority of this Manifest.  # noqa: E501
        :rtype: Authority
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this Manifest.


        :param authority: The authority of this Manifest.  # noqa: E501
        :type: Authority
        """
        if authority is None:
            raise ValueError("Invalid value for `authority`, must not be `None`")  # noqa: E501

        self._authority = authority

    @property
    def created_date(self):
        """Gets the created_date of this Manifest.  # noqa: E501


        :return: The created_date of this Manifest.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Manifest.


        :param created_date: The created_date of this Manifest.  # noqa: E501
        :type: date
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def currency(self):
        """Gets the currency of this Manifest.  # noqa: E501


        :return: The currency of this Manifest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Manifest.


        :param currency: The currency of this Manifest.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this Manifest.  # noqa: E501


        :return: The last_updated_date of this Manifest.  # noqa: E501
        :rtype: date
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this Manifest.


        :param last_updated_date: The last_updated_date of this Manifest.  # noqa: E501
        :type: date
        """

        self._last_updated_date = last_updated_date

    @property
    def time_zone(self):
        """Gets the time_zone of this Manifest.  # noqa: E501


        :return: The time_zone of this Manifest.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Manifest.


        :param time_zone: The time_zone of this Manifest.  # noqa: E501
        :type: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")  # noqa: E501

        self._time_zone = time_zone

    @property
    def unit_height_length(self):
        """Gets the unit_height_length of this Manifest.  # noqa: E501


        :return: The unit_height_length of this Manifest.  # noqa: E501
        :rtype: str
        """
        return self._unit_height_length

    @unit_height_length.setter
    def unit_height_length(self, unit_height_length):
        """Sets the unit_height_length of this Manifest.


        :param unit_height_length: The unit_height_length of this Manifest.  # noqa: E501
        :type: str
        """
        if unit_height_length is None:
            raise ValueError("Invalid value for `unit_height_length`, must not be `None`")  # noqa: E501

        self._unit_height_length = unit_height_length

    @property
    def unit_weight(self):
        """Gets the unit_weight of this Manifest.  # noqa: E501


        :return: The unit_weight of this Manifest.  # noqa: E501
        :rtype: str
        """
        return self._unit_weight

    @unit_weight.setter
    def unit_weight(self, unit_weight):
        """Sets the unit_weight of this Manifest.


        :param unit_weight: The unit_weight of this Manifest.  # noqa: E501
        :type: str
        """
        if unit_weight is None:
            raise ValueError("Invalid value for `unit_weight`, must not be `None`")  # noqa: E501

        self._unit_weight = unit_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Manifest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Manifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
